package com.company;

import java.util.Arrays;
import java.util.Random;

public class Main {

    public static void main(String[] args) {
        Random rnd = new Random();

        Glass glass1 = new Glass();
        glass1.add(0.15);
        System.out.println(glass1.getVolume_floid());
        Thermos thermos1 = new Thermos();
        thermos1.add(0.2, 30);
        System.out.println(thermos1.getTemperature());
        thermos1.updateTemperature(60);
        System.out.println(thermos1.getTemperature());


        Glass[] bunch = new Glass[10];
        for (int i = 0; i < bunch.length - 1; i++) {
            bunch[i] = new Glass(rnd.nextDouble() + 0.1);     // max_volume
        }
        bunch[9] = thermos1;
        System.out.println(Arrays.toString(bunch));
        for (int i = 0; i < 3; i++) {
            int a = rnd.nextInt(10 - i);
            bunch[a].add(rnd.nextDouble());
            Glass b = bunch[9 - i];
            bunch[9 - i] = bunch[a];
            bunch[a] = b;

        }
        System.out.println(Arrays.toString(bunch));
        for (int i = 0; i < 3; i++) {
            int a = rnd.nextInt(10);
            bunch[a].take(rnd.nextDouble());
            Glass b = bunch[9 - i];
            bunch[9 - i] = bunch[a];
            bunch[a] = b;

        }
        System.out.println(Arrays.toString(bunch));
        bunch[0].sortGlass(bunch);
        System.out.println(Arrays.toString(bunch));

        System.out.println(bunch[7] + " " + bunch[8]);
        bunch[7].transfusion(0.5, bunch[8]);
        System.out.println(bunch[7] + " " + bunch[8]);

        Thermos thermos_2 = new Thermos();
        thermos_2.add(0.13, 35);
        Thermos thermos_3 = new Thermos();
        thermos_3.add(0.17, 29);
        System.out.println(thermos_2.getTemperature() + " " + thermos_3.getTemperature());
        System.out.println(thermos_2 + " " + thermos_3);
        thermos_2.transfusion(0.11, thermos_3);
        System.out.println(thermos_2 + " " + thermos_3);
        System.out.println(thermos_3.getTemperature());
    }
}


package com.company;

import java.util.Random;

public class Glass {


    private double max_volume = 0.5;
    private double volume_floid = 0;

    public double getMax_volume() {
        return max_volume;
    }

    public double getVolume_floid() {
        return volume_floid;
    }

    Glass() {
        System.out.println("Glass created");
    }

    Glass(double volume_floid, double max_volume) {
        this.max_volume = max_volume;
        System.out.println("Glass created with options");
        this.volume_floid = volume_floid;
    }

    public void add(double a) {
        volume_floid += a;
        if (volume_floid > max_volume) {
            System.out.println("Error");
            volume_floid = max_volume;
        }
    }

    public void take(double b) {
        volume_floid -= b;
        if (volume_floid < 0) {
            System.out.println("Error");
            volume_floid = 0;
        }
    }

    @Override
    public String toString() {
        return String.format("%.2f", volume_floid) + "/" + String.format("%.2f", max_volume);
    }

    Glass(double a) {
        Random rnd = new Random();
        max_volume = a;
        while ((volume_floid = rnd.nextDouble()) > max_volume) ;

    }

    public void sortGlass(Glass[] h) {
        for (int j = h.length - 1; j > 0; j--) {
            for (int i = 0; i < j; i++) {
                if (h[i].getVolume_floid() > h[i + 1].getVolume_floid()) {
                    Glass b = h[i];
                    h[i] = h[i + 1];
                    h[i + 1] = b;
                }
            }
        }
    }

    public void transfusion(double a, Glass b) {  // метод переливания для стаканов
        if (a > volume_floid) {
            a = volume_floid;
        }
        if (a > (b.max_volume - b.volume_floid)) {
            a = b.max_volume - b.volume_floid;
        }
        take(a);
        b.add(a);
    }
}


package com.company;

public class Thermos extends Glass {

    private int temperature = 15;

    public int getTemperature() {
        return temperature;
    }

    Thermos() {
        System.out.println("Thermos created");

    }

    public void add(double a, int b) {
        this.add(a);
        temperature = b;
    }

    public void updateTemperature(int time) {
        temperature -= (int) ((time / 10) * 0.5);
        if (temperature < 15) {
            temperature = 15;
        }
    }

    public void transfusion(double a, Thermos b) {  //  t = (t1·m1+t2·m2) / (m1+m2)формула теплового баланса
        super.transfusion(a, b);
        b.temperature = (int) (((double) temperature * a + (double) b.getTemperature() * b.getVolume_floid()) / (a + b.getVolume_floid()));
    }
}
